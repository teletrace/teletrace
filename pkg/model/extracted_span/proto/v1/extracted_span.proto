syntax = "proto3";

package proto.extracted_span.v1;

option go_package = "generated/v1";

import "opentelemetry/proto/common/v1/common.proto";
import "opentelemetry/proto/resource/v1/resource.proto";
import "opentelemetry/proto/trace/v1/trace.proto";


// ExtractedSpan represents a single span along with its context of scope
// and resource.
// Fields are extracted and based on the message ExportTraceServiceRequest.
message ExtractedSpan {
  // The resource for the span in this message.
  // If this field is not set then no resource info is known.
  // It includes a set of attributes that describe the resource.
  // Attribute keys MUST be unique (it is not allowed to have more than one
  // attribute with the same key).
  // Extracted from ExportTraceServiceRequest.resource_spans.resource
  opentelemetry.proto.resource.v1.Resource resource = 1;

  // This schema_url applies to the data in the "resource" field.
  // extracted from ExportTraceServiceRequest.ResourceSpans.schema_url
  // should be use for compatability, see:
  // https://github.com/open-telemetry/oteps/blob/main/text/0152-telemetry-schemas.md
  // Extracted from ExportTraceServiceRequest.resource_spans.schema_url
  string resource_schema_url = 2;

  // The instrumentation scope information for the span in this message.
  // Information such as the fully qualified name and version.
  // Semantically when InstrumentationScope isn't set, it is equivalent with
  // an empty instrumentation scope name (unknown).
  // Extracted from ExportTraceServiceRequest.resource_spans.scope_spans.scope
  opentelemetry.proto.common.v1.InstrumentationScope scope = 3;

  // Span that originate from an instrumentation scope.
  // Span represents a single operation within a trace. Spans can be
  // nested to form a trace tree. Spans may also be linked to other spans
  // from the same or different trace and form graphs. Often, a trace
  // contains a root span that describes the end-to-end latency, and one
  // or more subspans for its sub-operations. A trace can also contain
  // multiple root spans, or none at all. Spans do not need to be
  // contiguous - there may be gaps or overlaps between spans in a trace.
  // Extracted from ExportTraceServiceRequest.resource_spans.scope_spans.spans
  // the spans object is flattened to multiple span objects
  opentelemetry.proto.trace.v1.Span span = 4;

  // This schema_url applies to the span event in the "span" field.
  // extracted from ExportTraceServiceRequest.ResourceSpans.ScopeSpans.schema_url
  // should be use for compatability, see:
  // https://github.com/open-telemetry/oteps/blob/main/text/0152-telemetry-schemas.md
  // Extracted from ExportTraceServiceRequest.resource_spans.scope_spans.schema_url
  string span_schema_url = 5;

  // Set of additional fields.
  ExternalFields external_fields = 6;
}

// ExternalFields are Additional fields added down the stream.
message ExternalFields {
  // the duration of the span.
  // Calculated as end_time_unix_nano - start_time_unix_nano
  fixed64 duration_nano = 1;
}
