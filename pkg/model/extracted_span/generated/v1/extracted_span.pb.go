// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: extracted_span.proto

package v1

import (
	v11 "go.opentelemetry.io/proto/otlp/common/v1"
	v1 "go.opentelemetry.io/proto/otlp/resource/v1"
	v12 "go.opentelemetry.io/proto/otlp/trace/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ExtractedSpan represents a single span along with its context of scope
// and resource.
// Fields are extracted and based on the message ExportTraceServiceRequest.
type ExtractedSpan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource for the span in this message.
	// If this field is not set then no resource info is known.
	// It includes a set of attributes that describe the resource.
	// Attribute keys MUST be unique (it is not allowed to have more than one
	// attribute with the same key).
	// Extracted from ExportTraceServiceRequest.resource_spans.resource
	Resource *v1.Resource `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// This schema_url applies to the data in the "resource" field.
	// extracted from ExportTraceServiceRequest.ResourceSpans.schema_url
	// should be use for compatability, see:
	// https://github.com/open-telemetry/oteps/blob/main/text/0152-telemetry-schemas.md
	// Extracted from ExportTraceServiceRequest.resource_spans.schema_url
	ResourceSchemaUrl string `protobuf:"bytes,2,opt,name=resource_schema_url,json=resourceSchemaUrl,proto3" json:"resource_schema_url,omitempty"`
	// The instrumentation scope information for the span in this message.
	// Information such as the fully qualified name and version.
	// Semantically when InstrumentationScope isn't set, it is equivalent with
	// an empty instrumentation scope name (unknown).
	// Extracted from ExportTraceServiceRequest.resource_spans.scope_spans.scope
	Scope *v11.InstrumentationScope `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	// Span that originate from an instrumentation scope.
	// Span represents a single operation within a trace. Spans can be
	// nested to form a trace tree. Spans may also be linked to other spans
	// from the same or different trace and form graphs. Often, a trace
	// contains a root span that describes the end-to-end latency, and one
	// or more subspans for its sub-operations. A trace can also contain
	// multiple root spans, or none at all. Spans do not need to be
	// contiguous - there may be gaps or overlaps between spans in a trace.
	// Extracted from ExportTraceServiceRequest.resource_spans.scope_spans.spans
	// the spans object is flattened to multiple span objects
	Span *v12.Span `protobuf:"bytes,4,opt,name=span,proto3" json:"span,omitempty"`
	// This schema_url applies to the span event in the "span" field.
	// extracted from ExportTraceServiceRequest.ResourceSpans.ScopeSpans.schema_url
	// should be use for compatability, see:
	// https://github.com/open-telemetry/oteps/blob/main/text/0152-telemetry-schemas.md
	// Extracted from ExportTraceServiceRequest.resource_spans.scope_spans.schema_url
	SpanSchemaUrl string `protobuf:"bytes,5,opt,name=span_schema_url,json=spanSchemaUrl,proto3" json:"span_schema_url,omitempty"`
	// Set of additional fields.
	ExternalFields *ExternalFields `protobuf:"bytes,6,opt,name=external_fields,json=externalFields,proto3" json:"external_fields,omitempty"`
}

func (x *ExtractedSpan) Reset() {
	*x = ExtractedSpan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_extracted_span_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractedSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractedSpan) ProtoMessage() {}

func (x *ExtractedSpan) ProtoReflect() protoreflect.Message {
	mi := &file_extracted_span_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractedSpan.ProtoReflect.Descriptor instead.
func (*ExtractedSpan) Descriptor() ([]byte, []int) {
	return file_extracted_span_proto_rawDescGZIP(), []int{0}
}

func (x *ExtractedSpan) GetResource() *v1.Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *ExtractedSpan) GetResourceSchemaUrl() string {
	if x != nil {
		return x.ResourceSchemaUrl
	}
	return ""
}

func (x *ExtractedSpan) GetScope() *v11.InstrumentationScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *ExtractedSpan) GetSpan() *v12.Span {
	if x != nil {
		return x.Span
	}
	return nil
}

func (x *ExtractedSpan) GetSpanSchemaUrl() string {
	if x != nil {
		return x.SpanSchemaUrl
	}
	return ""
}

func (x *ExtractedSpan) GetExternalFields() *ExternalFields {
	if x != nil {
		return x.ExternalFields
	}
	return nil
}

// ExternalFields are Additional fields added down the stream.
type ExternalFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the duration of the span.
	// Calculated as end_time_unix_nano - start_time_unix_nano
	DurationNano uint64 `protobuf:"fixed64,1,opt,name=duration_nano,json=durationNano,proto3" json:"duration_nano,omitempty"`
}

func (x *ExternalFields) Reset() {
	*x = ExternalFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_extracted_span_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalFields) ProtoMessage() {}

func (x *ExternalFields) ProtoReflect() protoreflect.Message {
	mi := &file_extracted_span_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalFields.ProtoReflect.Descriptor instead.
func (*ExternalFields) Descriptor() ([]byte, []int) {
	return file_extracted_span_proto_rawDescGZIP(), []int{1}
}

func (x *ExternalFields) GetDurationNano() uint64 {
	if x != nil {
		return x.DurationNano
	}
	return 0
}

var File_extracted_span_proto protoreflect.FileDescriptor

var file_extracted_span_proto_rawDesc = []byte{
	0x0a, 0x14, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x61, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x1a,
	0x2a, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x6f, 0x70, 0x65,
	0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x03, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x64, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x45, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x49,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x73, 0x70, 0x61,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x04, 0x73, 0x70, 0x61,
	0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x70, 0x61, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x50, 0x0a, 0x0f, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x35, 0x0a, 0x0e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6e, 0x6f, 0x42, 0x0e, 0x5a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_extracted_span_proto_rawDescOnce sync.Once
	file_extracted_span_proto_rawDescData = file_extracted_span_proto_rawDesc
)

func file_extracted_span_proto_rawDescGZIP() []byte {
	file_extracted_span_proto_rawDescOnce.Do(func() {
		file_extracted_span_proto_rawDescData = protoimpl.X.CompressGZIP(file_extracted_span_proto_rawDescData)
	})
	return file_extracted_span_proto_rawDescData
}

var file_extracted_span_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_extracted_span_proto_goTypes = []interface{}{
	(*ExtractedSpan)(nil),            // 0: proto.extracted_span.v1.ExtractedSpan
	(*ExternalFields)(nil),           // 1: proto.extracted_span.v1.ExternalFields
	(*v1.Resource)(nil),              // 2: opentelemetry.proto.resource.v1.Resource
	(*v11.InstrumentationScope)(nil), // 3: opentelemetry.proto.common.v1.InstrumentationScope
	(*v12.Span)(nil),                 // 4: opentelemetry.proto.trace.v1.Span
}
var file_extracted_span_proto_depIdxs = []int32{
	2, // 0: proto.extracted_span.v1.ExtractedSpan.resource:type_name -> opentelemetry.proto.resource.v1.Resource
	3, // 1: proto.extracted_span.v1.ExtractedSpan.scope:type_name -> opentelemetry.proto.common.v1.InstrumentationScope
	4, // 2: proto.extracted_span.v1.ExtractedSpan.span:type_name -> opentelemetry.proto.trace.v1.Span
	1, // 3: proto.extracted_span.v1.ExtractedSpan.external_fields:type_name -> proto.extracted_span.v1.ExternalFields
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_extracted_span_proto_init() }
func file_extracted_span_proto_init() {
	if File_extracted_span_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_extracted_span_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractedSpan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_extracted_span_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_extracted_span_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_extracted_span_proto_goTypes,
		DependencyIndexes: file_extracted_span_proto_depIdxs,
		MessageInfos:      file_extracted_span_proto_msgTypes,
	}.Build()
	File_extracted_span_proto = out.File
	file_extracted_span_proto_rawDesc = nil
	file_extracted_span_proto_goTypes = nil
	file_extracted_span_proto_depIdxs = nil
}
